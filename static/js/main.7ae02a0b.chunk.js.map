{"version":3,"sources":["store/index.ts","helpers/api.ts","helpers/post.ts","helpers/users.ts","components/PostsList/PostsList.tsx","helpers/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","store/selectors.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["ActionType","setPostsAction","createAction","SET_POSTS","setSelectedPostAction","SET_SELECTED_POST","setCommentsAction","SET_COMMENTS","addCommentAction","ADD_COMMENT","reducer","createReducer","posts","comments","selectedPost","builder","addCase","state","action","payload","push","store","configureStore","BASE_URL","getUserPosts","userId","a","fetch","response","json","getPostDetails","postId","deletePost","method","headers","getUsers","PostsList","selectPostId","onSelectedPostId","dispatch","useDispatch","deletePostClick","updatePosts","className","map","post","title","type","classNames","id","onClick","getPostComments","deleteComment","commentId","addComment","newComment","body","JSON","stringify","NewCommentForm","selectedPostId","setComments","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBody","handleSubmit","event","preventDefault","name","email","updateComments","onSubmit","placeholder","value","onChange","target","Loader","getCommentsSelector","getSelectedPostSelector","PostDetails","visibleComments","setVisibleComments","commentsError","setCommentsError","useSelector","useEffect","then","postDetails","getAllComments","commentsFromServer","length","clickDelete","comment","App","users","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","postsFromServer","usersFromServer","visiblePosts","filter","getVisiblePosts","user","ReactDOM","render","document","getElementById"],"mappings":"sRAGKA,E,wCAAAA,K,sBAAAA,E,uCAAAA,E,4BAAAA,E,4BAAAA,M,KAOL,IAMaC,EAAiBC,YAAqBF,EAAWG,WAEjDC,EAAwBF,YAAmBF,EAAWK,mBAEtDC,EAAoBJ,YAAwBF,EAAWO,cACvDC,EAAmBN,YAAsBF,EAAWS,aAE3DC,EAAUC,YAbY,CAC1BC,MAAO,GACPC,SAAU,GACVC,aAAc,OAU4B,SAACC,GAC3CA,EAAQC,QAAQf,GAAgB,SAACgB,EAAOC,GAEtCD,EAAML,MAAQM,EAAOC,WAEvBJ,EAAQC,QAAQZ,GAAuB,SAACa,EAAOC,GAE7CD,EAAMH,aAAeI,EAAOC,WAE9BJ,EAAQC,QAAQV,GAAmB,SAACW,EAAOC,GAEzCD,EAAMJ,SAAWK,EAAOC,WAE1BJ,EAAQC,QAAQR,GAAkB,SAACS,EAAOC,GAExCD,EAAMJ,SAASO,KAAKF,EAAOC,eAIlBE,EAAQC,YAAe,CAClCZ,Y,mDC3CWa,EAAW,oCCGXC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDAGrBD,EAHqB,gCAIPE,MAAM,GAAD,OAAIJ,EAAJ,WAJE,OAIxBK,EAJwB,6CAMPD,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBE,IANpB,OAMxBG,EANwB,uCASnBA,EAASC,QATU,4CAAH,sDAYZC,EAAc,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACLC,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBQ,IADtB,cACtBH,EADsB,yBAGrBA,EAASC,QAHY,2CAAH,sDAMdG,EAAU,uCAAG,WAAOD,GAAP,eAAAL,EAAA,sEACDC,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBQ,GAAU,CAC1DE,OAAQ,SACRC,QAAS,CACP,eAAgB,qCAJI,cAClBN,EADkB,yBAQjBA,EAASC,QARQ,2CAAH,sDClBVM,EAAQ,uCAAG,4BAAAT,EAAA,sEACCC,MAAM,GAAD,OAAIJ,EAAJ,WADN,cAChBK,EADgB,yBAGfA,EAASC,QAHM,2CAAH,qD,gCCWRO,EAA6B,SAAC,GAEpC,IADLxB,EACI,EADJA,MAAOyB,EACH,EADGA,aAAcC,EACjB,EADiBA,iBAEfC,EAAWC,cAEXC,EAAe,uCAAG,WAAOV,GAAP,eAAAL,EAAA,sEAChBM,EAAWD,GADK,uBAGIP,EAAa,GAHjB,OAGhBkB,EAHgB,OAKtBH,EAAStC,EAAeyC,IALF,2CAAH,sDAQrB,OACE,sBAAKC,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAkB,UAAQ,cAAxC,SACG/B,EAAMgC,KAAI,SAAAC,GAAI,OACb,qBAAIF,UAAU,kBAAd,UACE,gCACE,6CACaE,EAAKpB,OADlB,QAGCoB,EAAKC,SAGR,gCACE,wBACEC,KAAK,SACLJ,UAAWK,IAAW,oBAAqB,SAAU,CAEnD,4BAA6BX,IAAiBQ,EAAKI,KAErDC,QAAS,kBACPb,IAAiBQ,EAAKI,GAClBX,EAAiB,GACjBA,EAAiBO,EAAKI,KAT9B,SAWGZ,IAAiBQ,EAAKI,GAAK,QAAU,SAGxC,wBACEF,KAAK,SACLJ,UAAU,mCACVO,QAAS,kBAAMT,EAAgBI,EAAKI,KAHtC,oBAvBiCJ,EAAKI,aC9BvCE,EAAe,uCACxB,WAAOpB,GAAP,eAAAL,EAAA,sEACuBC,MAAM,GAAD,OAAIJ,EAAJ,4BAAgCQ,IAD5D,cACMH,EADN,yBAGOA,EAASC,QAHhB,2CADwB,sDAOfuB,EAAa,uCAAG,WAAOC,GAAP,eAAA3B,EAAA,sEACJC,MAAM,GAAD,OAAIJ,EAAJ,qBAAyB8B,GAAa,CAChEpB,OAAQ,SACRC,QAAS,CACP,eAAgB,qCAJO,cACrBN,EADqB,yBAQpBA,EAASC,QARW,2CAAH,sDAWbyB,EAAU,uCAAG,WAAOC,GAAP,eAAA7B,EAAA,sEACDC,MAAM,GAAD,OAAIJ,EAAJ,aAAyB,CACnDU,OAAQ,OACRuB,KAAMC,KAAKC,UAAUH,GACrBrB,QAAS,CACP,eAAgB,qCALI,cAClBN,EADkB,yBASjBA,EAASC,QATQ,2CAAH,sDCTV8B,G,MAAkC,SAAC,GAEzC,IADLC,EACI,EADJA,eAAgBC,EACZ,EADYA,YAEhB,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAEM7B,EAAWC,cAEX6B,EAAY,uCAAG,WAAOC,GAAP,mBAAA5C,EAAA,6DACnB4C,EAAMC,iBAEAhB,EAAyB,CAC7BxB,OAAQ6B,EACRY,KAAMT,EACNU,MAAOR,EACPT,KAAMW,GAPW,SAUIb,EAAWC,GAVf,cAUb3B,EAVa,OAYnBW,EAAS/B,EAAiBoB,IAZP,SAcUuB,EAAgBS,GAd1B,OAcbc,EAda,OAgBnBb,EAAYa,GAEZV,EAAkB,IAClBE,EAAmB,IACnBE,EAAkB,IApBC,4CAAH,sDAuBlB,OACE,uBAAMzB,UAAU,iBAAiBgC,SAAUN,EAA3C,UACE,qBAAK1B,UAAU,aAAf,SACE,uBACEI,KAAK,OACLyB,KAAK,OACLI,YAAY,YACZjC,UAAU,wBACVkC,MAAOd,EACPe,SAAU,SAACR,GAAD,OAAWN,EAAkBM,EAAMS,OAAOF,YAIxD,qBAAKlC,UAAU,aAAf,SACE,uBACEI,KAAK,OACLyB,KAAK,QACLI,YAAY,aACZjC,UAAU,wBACVkC,MAAOZ,EACPa,SAAU,SAACR,GAAD,OAAWJ,EAAmBI,EAAMS,OAAOF,YAIzD,qBAAKlC,UAAU,aAAf,SACE,0BACE6B,KAAK,OACLI,YAAY,oBACZjC,UAAU,wBACVkC,MAAOV,EACPW,SAAU,SAACR,GAAD,OAAWF,EAAkBE,EAAMS,OAAOF,YAIxD,wBACE9B,KAAK,SACLJ,UAAU,uCAFZ,gCC3EOqC,G,MAAmB,kBAC9B,qBAAKrC,UAAU,SAAf,SACE,qBAAKA,UAAU,wBCFNsC,EAAsB,SAAChE,GAAD,OAAkBA,EAAMJ,UAC9CqE,EAA0B,SAACjE,GAAD,OAAkBA,EAAMH,cCYlDqE,G,MAA+B,SAAC,GAAwB,IAAtBvB,EAAqB,EAArBA,eAC7C,EAA8CE,oBAAS,GAAvD,mBAAOsB,EAAP,KAAwBC,EAAxB,KACA,EAA0CvB,oBAAS,GAAnD,mBAAOwB,EAAP,KAAsBC,EAAtB,KAEMhD,EAAWC,cACX1B,EAAe0E,YAAYN,GAC3BrE,EAAW2E,YAAYP,GAE7BQ,qBAAU,WACR3D,EAAe8B,GACZ8B,MAAK,SAAAC,GAAW,OAAIpD,EAASnC,EAAsBuF,OAEtDN,GAAmB,GACnBE,GAAiB,KAChB,CAAC3B,IAEJ,IAAMgC,EAAc,uCAAG,4BAAAlE,EAAA,sEACYyB,EAAgBS,GAD5B,OAGa,KAF5BiC,EADe,QAGEC,QACrBvD,EAASjC,EAAkB,KAC3BiF,GAAiB,KAEjBhD,EAASjC,EAAkBuF,IAC3BN,GAAiB,IARE,2CAAH,qDAsBdQ,EAAW,uCAAG,WAAO1C,GAAP,eAAA3B,EAAA,sEACZ0B,EAAcC,GADF,uBAEWF,EAAgBS,GAF3B,OAEZc,EAFY,OAIlBnC,EAASjC,EAAkBoE,IAJT,2CAAH,sDAOjB,OACE,sBAAK/B,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,mCAAI7B,QAAJ,IAAIA,OAAJ,EAAIA,EAAc0C,SAGnB1C,EACC,0BAAS6B,UAAU,wBAAwB,UAAQ,cAAnD,UACE,wBACEI,KAAK,SACLG,QAAS,WA5BbkC,GACFC,GAAmB,GACnBE,GAAiB,KAEjBK,IACAP,GAAmB,KAwBb1C,UAAU,SAHZ,SAKGyC,EAAkB,gBAAkB,kBAGtCA,GACC,oBAAIzC,UAAU,oBAAd,SACG9B,EAAS+B,KAAI,SAAAoD,GAAO,OACnB,qBAAIrD,UAAU,yBAAd,UACE,wBACEI,KAAK,SACLG,QAAS,kBAAM6C,EAAYC,EAAQ/C,KACnCN,UAAU,oCAHZ,eAOA,4BAAIqD,EAAQxC,SAR8BwC,EAAQ/C,YAe5D,cAAC,EAAD,IAGDqC,GACC,mBAAG3C,UAAU,kCAAb,8CAKF,kCACE,qBAAKA,UAAU,4BAAf,SACE,cAAC,EAAD,CACEiB,eAAgBA,EAChBC,YAAa+B,aChCVK,EAlEO,WACpB,MAA0BnC,mBAAiB,IAA3C,mBAAOoC,EAAP,KAAcC,EAAd,KACA,EAA4CrC,mBAAS,GAArD,mBAAOsC,EAAP,KAAuBC,EAAvB,KACA,EAA4CvC,mBAAS,GAArD,mBAAOF,EAAP,KAAuB0C,EAAvB,KAEM/D,EAAWC,cAEjBiD,qBAAU,WACRjE,EAAa4E,GACVV,MAAK,SAAAa,GAAe,OAAIhE,EAAStC,EAAesG,OAEnDpE,IACGuD,MAAK,SAAAc,GAAe,OAAIL,EAASK,QACnC,IAEH,IAIMC,EAAejB,YFzBQ,SAACY,GAC9B,OAAO,SAACnF,GAAD,OAAkBA,EAAML,MAAM8F,QAAO,SAAA7D,GAC1C,OAAKuD,EAIEvD,EAAKpB,SAAW2E,EAHdvD,MEsBsB8D,CAAgBP,IAEjD,OACE,sBAAKzD,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACVkC,MAAOuB,EACPtB,SAAU,SAACR,GACT+B,GAAmB/B,EAAMS,OAAOF,QAJpC,UAOE,wBAAQA,MAAM,IAAd,uBACCqB,EAAMtD,KAAI,SAAAgE,GAAI,OACb,wBACE/B,MAAO+B,EAAK3D,GADd,SAIG2D,EAAKpC,MAFDoC,EAAK3D,eASpB,uBAAMN,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACE/B,MAAO6F,EACPpE,aAAcuB,EACdtB,iBArCQ,SAACP,GACjBuE,EAAkBvE,QAwCM,IAAnB6B,GACC,qBAAKjB,UAAU,eAAf,SACE,cAAC,EAAD,CAAaiB,eAAgBA,aChEzCiD,IAASC,OACP,cAAC,IAAD,CAAUzF,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF0F,SAASC,eAAe,W","file":"static/js/main.7ae02a0b.chunk.js","sourcesContent":["import { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\nimport { Post, Comment, State } from '../react-app-env';\n\nenum ActionType {\n  SET_POSTS = 'SET_POSTS',\n  SET_SELECTED_POST = ' SET_SELECTED_POST',\n  SET_COMMENTS = 'SET_COMMENTS',\n  ADD_COMMENT = ' ADD_COMMENT',\n}\n\nconst initialState: State = {\n  posts: [],\n  comments: [],\n  selectedPost: null,\n};\n\nexport const setPostsAction = createAction<Post[]>(ActionType.SET_POSTS);\n// eslint-disable-next-line max-len\nexport const setSelectedPostAction = createAction<Post>(ActionType.SET_SELECTED_POST);\n// eslint-disable-next-line max-len\nexport const setCommentsAction = createAction<Comment[]>(ActionType.SET_COMMENTS);\nexport const addCommentAction = createAction<Comment>(ActionType.ADD_COMMENT);\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setPostsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n  builder.addCase(setSelectedPostAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.selectedPost = action.payload;\n  });\n  builder.addCase(setCommentsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n  });\n  builder.addCase(addCommentAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments.push(action.payload);\n  });\n});\n\nexport const store = configureStore({\n  reducer,\n});\n\nexport default store;\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\nimport { Post } from '../react-app-env';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  let response;\n\n  if (!userId) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts/${userId}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n\nexport const deletePost = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\nimport { User } from '../react-app-env';\n\nexport const getUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport './PostsList.scss';\nimport { useDispatch } from 'react-redux';\nimport { Post } from '../../react-app-env';\nimport { deletePost, getUserPosts } from '../../helpers/post';\nimport { setPostsAction } from '../../store/index';\n\ninterface Props {\n  posts: Post[],\n  selectPostId: number,\n  onSelectedPostId: (postId: number) => void,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectPostId, onSelectedPostId,\n}) => {\n  const dispatch = useDispatch();\n\n  const deletePostClick = async (postId: number) => {\n    await deletePost(postId);\n\n    const updatePosts = await getUserPosts(0);\n\n    dispatch(setPostsAction(updatePosts));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n\n            <div>\n              <button\n                type=\"button\"\n                className={classNames('PostsList__button', 'button', {\n                  // eslint-disable-next-line max-len\n                  'PostsList__button--active': selectPostId === post.id,\n                })}\n                onClick={() => (\n                  selectPostId === post.id\n                    ? onSelectedPostId(0)\n                    : onSelectedPostId(post.id))}\n              >\n                {selectPostId === post.id ? 'Close' : 'Open'}\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button--delete button\"\n                onClick={() => deletePostClick(post.id)}\n              >\n                X\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\nimport { Comment, NewComment } from '../react-app-env';\n\nexport const getPostComments\n  = async (postId: number): Promise<Comment []> => {\n    const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n    return response.json();\n  };\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addComment, getPostComments } from '../../helpers/comments';\nimport { NewComment } from '../../react-app-env';\nimport { addCommentAction } from '../../store';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectedPostId: number,\n  setComments: (comments: NewComment[]) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId, setComments,\n}) => {\n  const [newCommentName, setNewCommentName] = useState('');\n  const [newCommentEmail, setNewCommentEmail] = useState('');\n  const [newCommentBody, setNewCommentBody] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment: NewComment = {\n      postId: selectedPostId,\n      name: newCommentName,\n      email: newCommentEmail,\n      body: newCommentBody,\n    };\n\n    const response = await addComment(newComment);\n\n    dispatch(addCommentAction(response));\n\n    const updateComments = await getPostComments(selectedPostId);\n\n    setComments(updateComments);\n\n    setNewCommentName('');\n    setNewCommentEmail('');\n    setNewCommentBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newCommentName}\n          onChange={(event) => setNewCommentName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newCommentEmail}\n          onChange={(event) => setNewCommentEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newCommentBody}\n          onChange={(event) => setNewCommentBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { State } from '../react-app-env';\n\nexport const getPostsSelector = (state: State) => state.posts;\nexport const getCommentsSelector = (state: State) => state.comments;\nexport const getSelectedPostSelector = (state: State) => state.selectedPost;\n\nexport const getVisiblePosts = (selectedUserId: number) => {\n  return (state: State) => state.posts.filter(post => {\n    if (!selectedUserId) {\n      return post;\n    }\n\n    return post.userId === selectedUserId;\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../helpers/post';\nimport { getPostComments, deleteComment } from '../../helpers/comments';\nimport {\n  getSelectedPostSelector, getCommentsSelector,\n} from '../../store/selectors';\nimport { setSelectedPostAction, setCommentsAction } from '../../store';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [visibleComments, setVisibleComments] = useState(false);\n  const [commentsError, setCommentsError] = useState(false);\n\n  const dispatch = useDispatch();\n  const selectedPost = useSelector(getSelectedPostSelector);\n  const comments = useSelector(getCommentsSelector);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(postDetails => dispatch(setSelectedPostAction(postDetails)));\n\n    setVisibleComments(false);\n    setCommentsError(false);\n  }, [selectedPostId]);\n\n  const getAllComments = async () => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    if (commentsFromServer.length === 0) {\n      dispatch(setCommentsAction([]));\n      setCommentsError(true);\n    } else {\n      dispatch(setCommentsAction(commentsFromServer));\n      setCommentsError(false);\n    }\n  };\n\n  const showComments = () => {\n    if (visibleComments) {\n      setVisibleComments(false);\n      setCommentsError(false);\n    } else {\n      getAllComments();\n      setVisibleComments(true);\n    }\n  };\n\n  const clickDelete = async (commentId: number) => {\n    await deleteComment(commentId);\n    const updateComments = await getPostComments(selectedPostId);\n\n    dispatch(setCommentsAction(updateComments));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.body}</p>\n      </section>\n\n      {selectedPost ? (\n        <section className=\"PostDetails__comments\" data-cy=\"postDetails\">\n          <button\n            type=\"button\"\n            onClick={() => showComments()}\n            className=\"button\"\n          >\n            {visibleComments ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          {visibleComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    onClick={() => clickDelete(comment.id)}\n                    className=\"PostDetails__remove-button button\"\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      ) : (\n        <Loader />\n      )}\n\n      {commentsError && (\n        <p className=\"PostDetails__comments--notFound\">\n          There are no comments yet &#9785;\n        </p>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            setComments={getAllComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { User } from './react-app-env';\nimport { getUserPosts } from './helpers/post';\nimport { getUsers } from './helpers/users';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { setPostsAction } from './store/index';\nimport { getVisiblePosts } from './store/selectors';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getUserPosts(selectedUserId)\n      .then(postsFromServer => dispatch(setPostsAction(postsFromServer)));\n\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const setPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  const visiblePosts = useSelector(getVisiblePosts(selectedUserId));\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={visiblePosts}\n            selectPostId={selectedPostId}\n            onSelectedPostId={setPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}